package service_impl

import (
  "<%= appName %>/dto"
  "<%= appName %>/helpers/page"
  "<%= appName %>/helpers/pagination"
  "<%= appName %>/repository"
  "<%= appName %>/service"
  "<%= appName %>/service/mapper"
)

type <%= entityVar %> struct {
  repository repository.<%= entityClass %>
  mapper mapper.<%= entityClass %>
}

func New<%= entityClass %>(repository repository.<%= entityClass %>, mapper mapper.<%= entityClass %>) service.<%= entityClass %> {
  return &<%= entityVar %>{repository: repository, mapper: mapper}
}

func (s *<%= entityVar %>) Save(<%= entityVar %>DTO dto.<%= entityClass %>DTO) (dto.<%= entityClass %>DTO, bool) {
  <%= entityVar %> := s.mapper.ToEntity(<%= entityVar %>DTO)
  var err error
  <%= entityVar %>, err = s.repository.Save(<%= entityVar %>)
  if err != nil {
    return <%= entityVar %>DTO, false
  }
  return s.mapper.ToDTO(<%= entityVar %>), true
}

func (s *<%= entityVar %>) FindOne(id uint) (dto.<%= entityClass %>DTO, bool) {
  <%= entityVar %>, err := s.repository.FindOne(id)
  if err != nil {
    return dto.<%= entityClass %>DTO{}, false
  }
  return s.mapper.ToDTO(<%= entityVar %>), true
}

func (s *<%= entityVar %>) FindPage(pageable pagination.Pageable) page.Page {
  return s.repository.FindPage(pageable)
}

func (s *<%= entityVar %>) Delete(id uint) {
  s.repository.Delete(id)
}
